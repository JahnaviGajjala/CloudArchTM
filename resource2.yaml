AWSTemplateFormatVersion: "2010-09-09"
Description: Configuration for Lambda and API Gateway to integrate AWS Rekognition and Polly.

Resources:
  JahnaviLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: JahnaviLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3RekognitionPolly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "rekognition:DetectText"
                  - "polly:StartSpeechSynthesisTask"
                Resource: "*"
 
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RekognitionPolly
      Handler: index.lambda_handler
      Role: !GetAtt JahnaviLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              body = json.loads(event['body'])
              s3_client = boto3.client('s3')
              rekognition_client = boto3.client('rekognition')
              polly_client = boto3.client('polly')
              input_bucket_name = body['input_bucket']
              document_key = body['input_bucket_file']
              output_bucket_name = 'output-polly-jahnavi'

              # Detect text using Rekognition
              rekognition_response = rekognition_client.detect_text(
                  Image={'S3Object': {'Bucket': input_bucket_name, 'Name': document_key}}
              )
              detected_text = " ".join([text_detail['DetectedText'] for text_detail in rekognition_response['TextDetections'] if text_detail['Type'] == 'LINE'])
              
              # Convert detected text to speech using Polly
              polly_response = polly_client.start_speech_synthesis_task(
                  OutputS3BucketName=output_bucket_name,
                  OutputFormat='mp3',
                  Text=detected_text,
                  VoiceId='Joanna'
              )
              return {
                  'statusCode': 200,
                  'body': f"Text extracted and speech synthesis started with TaskId {polly_response['SynthesisTask']['TaskId']}"
              }
      Runtime: python3.8
      Timeout: 120  # Adjusted to allow more time for processing
  
  JahnaviApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: JahnaviAPIGateway

  JahnaviApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt JahnaviApiGatewayRestApi.RootResourceId
      PathPart: rekognition-polly
      RestApiId: !Ref JahnaviApiGatewayRestApi

  JahnaviApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref JahnaviApiGatewayResource
      RestApiId: !Ref JahnaviApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  JahnaviApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - JahnaviApiGatewayMethod
    Properties:
      RestApiId: !Ref JahnaviApiGatewayRestApi
      StageName: prod

  JahnaviLambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${JahnaviApiGatewayRestApi}/*/*"

Outputs:
  ApiEndpoint:
    Description: "API endpoint for triggering the Lambda function via HTTP POST"
    Value: !Sub "https://${JahnaviApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/rekognition-polly"

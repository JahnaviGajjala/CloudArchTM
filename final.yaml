AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy resources for a Flask app that processes images with Textract and Polly.

Parameters:
  InputBucketName:
    Description: "The name of the S3 bucket for input files."
    Type: String
    Default: "input-textract-yourname"
  OutputBucketName:
    Description: "The name of the S3 bucket for output from Polly."
    Type: String
    Default: "output-polly-yourname"

Resources:
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref InputBucketName

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref OutputBucketName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                  - s3:PutObject
                  - textract:*
                  - polly:*
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TextractPollyFunction
      Code:
        ZipFile: |
          import json
          import boto3
          
          def lambda_handler(event, context):
              s3_client = boto3.client('s3')
              textract_client = boto3.client('textract')
              polly_client = boto3.client('polly')
              
              input_bucket = event['input_bucket']
              document_key = event['input_bucket_file']
              output_bucket = event['output_bucket']
              
              response = textract_client.start_document_text_detection(
                  DocumentLocation={
                      'S3Object': {'Bucket': input_bucket, 'Name': document_key}
                  }
              )
              job_id = response['JobId']
              job_status = 'IN_PROGRESS'
              while job_status == 'IN_PROGRESS':
                  result = textract_client.get_document_text_detection(JobId=job_id)
                  job_status = result['JobStatus']
              
              extracted_text = ' '.join([block['Text'] for block in result['Blocks'] if block['BlockType'] == 'LINE'])
              
              polly_response = polly_client.start_speech_synthesis_task(
                  OutputS3BucketName=output_bucket,
                  OutputFormat='mp3',
                  Text=extracted_text,
                  VoiceId='Joanna'
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps(f"Speech synthesis started with task ID: {polly_response['SynthesisTask']['TaskId']}")
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 120

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ImageProcessingApi

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'processor'
      RestApiId: !Ref ApiGateway

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/processor

Outputs:
  ApiEndpoint:
    Description: "URL for the processed image API"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/processor"
